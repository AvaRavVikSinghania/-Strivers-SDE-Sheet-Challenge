//Next premutation
#include <bits/stdc++.h> 
vector<int> nextPermutation(vector<int> &permutation, int n)
{
    //  Write your code here.
     int index=-1;
     for(int i=n-2;i>=0;i--){
         if(permutation[i]<permutation[i+1]){
             index=i;
             break;
         }
     }
     if(index==-1){
         reverse(permutation.begin(),permutation.end());
         return permutation;
     }
     for(int i=n-1;i>=0;i--){
         if(permutation[i]>permutation[index]){
             swap(permutation[i],permutation[index]);
             break;
         }
     }
     reverse(permutation.begin()+index+1,permutation.end());
     return permutation;
}
//Missing and repeated element in array
#include <bits/stdc++.h>

pair<int,int> missingAndRepeating(vector<int> &arr, int n)
{
	// Write your code here 
	int sum=0;
	int xor_element=0;
	int total_xor=0;
	int repeated_number=0;
	unordered_map<int,int>mp;
	for(int i=0;i<n;i++)mp[arr[i]]++;
	for(auto it:mp){
	  if(it.second==2){
         repeated_number=it.first;
		 break;
	  }
	}
	for(int i=0;i<n;i++){
		sum+=arr[i];
		xor_element^=arr[i];
		total_xor^=(i+1);
	}
	int xor1=xor_element^total_xor;
    return {xor1^repeated_number,repeated_number};
	
}
//maximum len of subarray which sum is 0
#include <bits/stdc++.h>

int LongestSubsetWithZeroSum(vector < int > arr) {

  // Write your code here
  map<int,int>mp;
  int n=arr.size();
  int sum=0;
  int maxlen=0;
  for(int i=0;i<n;i++){
    sum+=arr[i];
    if(sum==0){
      maxlen=max(maxlen,i+1);
    }
    int req=sum-0;
    if(mp.find(req)!=mp.end()){
      int len=i-mp[req];
      maxlen=max(maxlen,len);
    }
    if(mp.find(sum)==mp.end()){
      mp[sum]=i;
    }
  }
  return maxlen;
}
//Four sum problem
#include <bits/stdc++.h>

string fourSum(vector<int> arr, int target, int n) {
    // Write your code here.
    unordered_map<int,pair<int,int>>mp;
    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            mp[arr[i]+arr[j]]={i,j};
        }
    }
    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            int sum=arr[i]+arr[j];
            int req_sum=target-sum;
            if(mp.find(req_sum)!=mp.end()){
                int x=mp[req_sum].first;
                int y=mp[req_sum].second;
                if(x!=i && x!=j && y!=i && y!=j){
                    return "Yes";
                }
            }
        }
    }
    return "No";
}
//Deleting Kth Node from the end;
/*
Following is the class structure of the Node class:

class Node
{
public:
    int data;
    Node *next;
    Node()
    {
        this->data = 0;
        next = NULL;
    }
    Node(int data)
    {
        this->data = data; 
        this->next = NULL;
    }
    Node(int data, Node* next)
    {
        this->data = data;
        this->next = next;
    }
};
*/

Node* removeKthNode(Node* head, int K)
{
    // Write your code here.
    Node* temp=head;
    int len=0;
    while(temp){
        len++;
        temp=temp->next;
    }
    len=abs(K-len);
    if(len==0) return head->next;
    temp=head;
    Node* prev=NULL;

    while(len){
        prev=temp;
        temp=temp->next;
        len--;
    }
    prev->next=temp->next;
    return head;
}
//Cycle detection in a linked list
/****************************************************************

    Following is the class structure of the Node class:

        class Node
        {
        public:
            int data;
            Node *next;
            Node()
            {
                this->data = 0;
                next = NULL;
            }
            Node(int data)
            {
                this->data = data;
                this->next = NULL;
            }
            Node(int data, Node* next)
            {
                this->data = data;
                this->next = next;
            }
        };


*****************************************************************/

bool detectCycle(Node *head)
{
	//	Write your code here
   Node* slow=head;
   Node* fast=head->next;
   while(fast && fast->next){
       if(slow==fast) return true;
       slow=slow->next;
       fast=fast->next->next;
   }
   return false;
}
