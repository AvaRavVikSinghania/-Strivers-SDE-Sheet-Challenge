//inorder traversal
#include <bits/stdc++.h> 
/*
    Following is Binary Tree Node structure:
    class TreeNode
    {
    public:
        int data;
        TreeNode *left, *right;
        TreeNode() : data(0), left(NULL), right(NULL) {}
        TreeNode(int x) : data(x), left(NULL), right(NULL) {}
        TreeNode(int x, TreeNode *left, TreeNode *right) : data(x), left(left), right(right) {}
    };
*/
void inorder(TreeNode*root,vector<int>&ans){
    if(!root) return;
    inorder(root->left,ans);
    ans.push_back(root->data);
    inorder(root->right,ans);

}
vector<int> getInOrderTraversal(TreeNode *root)
{
    // Write your code here.
    vector<int>ans;
    inorder(root,ans);
    return ans;
}
//compair version of number
#include <bits/stdc++.h> 
int compareVersions(string a, string b) 
{
    // Write your code here
  int i=0,j=0, aLen = a.length(), bLen = b.length();
   while(i<aLen || j<bLen)
   {
       long long n1 = 0,n2 = 0;
       while(i<aLen && a[i] != '.')
       {
           n1 = n1 * 10 + 1ll*(a[i] - '0');
           i++;
       }
       while(j<bLen && b[j] != '.')
       {
           n2 = n2*10 + 1ll*(b[j] - '0');
           j++;
       }
       if(n1 < n2)
           return -1;
       else if(n1 > n2)
           return 1;
       i++;
       j++;
     
   }
     return 0;
}
//checking anagram
#include <bits/stdc++.h> 
bool areAnagram(string &str1, string &str2){
    // Write your code here.
    sort(str1.begin(),str1.end());
    sort(str2.begin(),str2.end());
    return str1==str2;
}
//string matching
#include <bits/stdc++.h> 
bool findPattern(string p, string s)
{
    // Write your code here.
    int m=p.size(), n=s.size();
    int count=0;
   for(int i=0;i<n;i++){
       string str=s.substr(i,m);
       if(str==p){
           count++;
       }
       else{
          continue;
       }
   }
    if(count>0) return true;
    else if(count==0) return false;
    
}
//reverse string without reversing meaning of word
string reverseString(string &str){
	// Write your code here.
	stack<string>st;
	for(int i=0;i<str.size();i++){
		string word="";
		while(str[i]!=' ' && i<str.size()){
			word+=str[i];
			i++;
		}
		if(!word.empty()){
			st.push(word);
		}
	}
	string ans="";
	while(!st.empty()){
		ans+=st.top();
		ans.push_back(' ');
		st.pop();
	}
	return ans;
}
// level order traversal
#include <bits/stdc++.h> 
/************************************************************

    Following is the BinaryTreeNode class structure

    template <typename T>
    class BinaryTreeNode {
       public:
        T val;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T val) {
            this->val = val;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/
vector<int> getLevelOrder(BinaryTreeNode<int> *root) {
  //  Write your code here.
  if(root == NULL){
        return{};
    }
    vector<int>ans;
    queue<BinaryTreeNode<int> *> q;
    q.push(root);    

    while(!q.empty()){
        BinaryTreeNode<int> *front = q.front();
        q.pop();

        ans.push_back(front->val);

        if (front->left != NULL){
            q.push(front->left);
        }
        if(front->right != NULL){
            q.push(front->right);
        }
    }
     return ans;
}