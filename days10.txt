Rat in Maze
#include <bits/stdc++.h> 
vector<vector<int>>ans;
bool possible(int x, int y, vector<vector<int>> &maze, int n){
    return (x >=0 and x < n and y >= 0 and y < n and maze[x][y] == 1);
}
void appendToPaths(vector<vector<int>> &path, int n){
    vector<int> v;
    for(int i=0;i<n;i++)
        for(int j=0;j<n;j++)
            v.push_back(path[i][j]);
    ans.push_back(v);
}
void solve(vector<vector<int>> &maze, int x, int y, int n, vector<vector<int>> &path){
    if(x == n-1 and y == n-1){
        path[x][y]++;
        appendToPaths(path, n);
        path[x][y]--;
        return;
    };
    path[x][y]++;
    maze[x][y]++;
    if(possible(x, y-1, maze, n)) solve(maze, x, y-1, n, path);
    if(possible(x-1, y, maze, n)) solve(maze, x-1, y, n, path);
    if(possible(x, y+1, maze, n)) solve(maze, x, y+1, n, path);
    if(possible(x+1, y, maze, n)) solve(maze, x+1, y, n, path);
    maze[x][y]--;
    path[x][y]--;
}
vector<vector<int> > ratInAMaze(vector<vector<int> > &maze, int n){
  // Write your code here.
    vector<vector<int>> path(n, vector<int> (n, 0));
    solve(maze, 0, 0, n, path);
    return ans;
}
//Trapping rain water
#include <bits/stdc++.h> 
long getTrappedWater(long *arr, int n){
    // Write your code here.
    vector<long >prelarger(n,0);
    vector<long >postlarger(n,0);
    long max_element=arr[0];
    prelarger[0]=arr[0];
    for(int i=1;i<n;i++){
        prelarger[i]=max(max_element,arr[i]);
        max_element=max(max_element,arr[i]);
    }
    max_element=arr[n-1];
    postlarger[n-1]=arr[n-1];
    for(int i=n-2;i>=0;i--){
        postlarger[i]=max(max_element,arr[i]);
        max_element=max(max_element,arr[i]);
    }
    long ans=0;
    for(int i=0;i<n;i++){
        ans+=(min(prelarger[i],postlarger[i])-arr[i]);
    }
    return ans;
}
#include <bits/stdc++.h> 
bool canColor (vector<vector<int>> &mat,vector<int>&paint , int n  , int color , int m , int node  ){
    
    //check if all relatives are not of color (color)
   
    for ( int i=0; i<n; i++){
        if(i!=node  and mat[node][i]==1 and paint[i]==color)return false;
    }
    //no error 
    return true;
    
} 
//coloring of graph
bool recur(vector<vector<int>> &mat, vector<int>& paint , int n , int m, int start){
     
     // when to break;
     if(start==n)return true;
     
     //try this node with  any possible color 
     
     for( int i=1; i<=m ; i++){
         //if possible to color 
         if( canColor( mat,paint ,n,i, m,start)){
             //paint that sh*t
             paint[start]=i;
             //check if others accept that rhythm
             if(recur ( mat, paint , n , m , start+1))return true;
             //else you painted the wrong bro, leave that unpaint
             paint[start]=0;
         }
         
       
        
     } 
       // no true return  in any color combination with any node :)
      return false;
 }
string graphColoring(vector<vector<int>> &mat, int m) {
    // Write your code here
     int n = mat.size();
    int start=0;
    vector<int>paint(n,0);
    if(recur(mat,paint , n,m , start))return "YES";
    return "NO";
}