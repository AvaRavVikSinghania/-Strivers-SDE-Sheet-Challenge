//majority_element
#include <bits/stdc++.h>

int findMajorityElement(int arr[], int n) {
	// Write your code here.
	unordered_map<int,int>mp;
	for(int i=0;i<n;i++){
		mp[arr[i]]++;
	}
	for(auto it:mp){
		if(it.second>(n/2)) return it.first;
	}
	return -1;
}
//return all mjority element count> n/3
#include <bits/stdc++.h>

vector<int> majorityElementII(vector<int> &arr)
{
    // Write your code here.
    int n=arr.size();
    vector<int>ans;
    unordered_map<int,int>mp;
    for(int i=0;i<n;i++){
        mp[arr[i]]++;
    }
    for(auto it:mp){
        if(it.second>n/3) ans.push_back(it.first);
    }
    return ans;

}
//middle Node
/*
Following is the class structure of the Node class:

class Node
{
public:
    int data;
    Node *next;
    Node()
    {
        this->data = 0;
        next = NULL;
    }
    Node(int data)
    {
        this->data = data; 
        this->next = NULL;
    }
    Node(int data, Node* next)
    {
        this->data = data;
        this->next = next;
    }
};
*/

Node *findMiddle(Node *head) {
    // Write your code here
    Node* slow=head;
    Node* fast=head;
    while(fast && fast->next){
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow;
}
// removing dubliate;
int removeDuplicates(vector<int> &arr, int n) {
	// Write your code here.
	int count=1;
	int temp=arr[0];
	for(int i=1;i<n;i++){
        if(arr[i]!=temp){
			count++;
			temp=arr[i];
		}
	}
	return count;
}
// merge two sorted array
#include <bits/stdc++.h>

vector<int> ninjaAndSortedArrays(vector<int>& arr1, vector<int>& arr2, int n, int m) {
	// Write your code here.
	int i=0;
	int j=0;
	vector<int>ans;
	while(i<n && j<m){
		if(arr1[i]<arr2[j]){
		    ans.push_back(arr1[i]);
			i++;
		}
		else{
			ans.push_back(arr2[j]);
			j++;
		}
	}
	while(i<n){
		ans.push_back(arr1[i]);
		i++;
	}
	while(j<m){
	    ans.push_back(arr2[j]);
		j++;
	}
	return ans;

}
