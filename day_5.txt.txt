//culculate all subarray which xor is x
#include <bits/stdc++.h>
int subarraysXor(vector<int> &arr, int x)
{
    //    Write your code here.
    int cnt=0;
    int xr=0;
    map<int,int>mp;
    mp[0]=1;
    int n=arr.size();
    for(int i=0;i<n;i++){
        xr^=arr[i];
        int req=xr^x;
        cnt+=mp[req];
        mp[xr]++;
    }
    return cnt;
}
//reverse inked list
#include <bits/stdc++.h>

/****************************************************************

    Following is the class structure of the LinkedListNode class:

    template <typename T>
    class LinkedListNode
    {
    public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*****************************************************************/

LinkedListNode<int> *reverseLinkedList(LinkedListNode<int> *head) 
{
    // Write your code here
    LinkedListNode<int> *next=NULL;
    LinkedListNode<int> *prev=NULL;
    while(head){
        next=head->next;
        head->next=prev;
        prev=head;
        head=next;
    }
    return prev;
}
//coin changes
#include <bits/stdc++.h> 
int findMinimumCoins(int amount) 
{
    // Write your code here
    int arr[]={1,2,5,10,20,50,100,500,1000};
    int cnt=0;
    for(int i=8;i>=0;i--){
        while(amount>=arr[i]){
            amount-=arr[i];
            cnt++;
        }
    }
    return cnt;
}
//next greater element
#include <bits/stdc++.h> 

vector<int> nextGreater(vector<int> &arr, int n) {
    // Write your code here
        stack<int>st;
        st.push(arr[n-1]);
        arr[n-1]=-1;
        for(int i=n-2;i>=0;i--){
            if(arr[i]<st.top()){
                int temp=arr[i];
                arr[i]=st.top();
                st.push(temp);
            }
            else{
                while(!st.empty() && st.top()<=arr[i]){
                    st.pop();
                }
                if(st.empty()){
                    st.push(arr[i]);
                    arr[i]=-1;
                }
                else{
                    int temp=arr[i];
                    arr[i]=st.top();
                    st.push(temp);
                }
            }
        }
        return arr;
}